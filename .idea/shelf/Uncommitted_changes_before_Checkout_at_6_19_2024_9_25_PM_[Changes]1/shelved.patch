Index: SWP/src/main/java/com/backendVn/SWP/repositories/PaymentRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.backendVn.SWP.repositories;\r\n\r\nimport com.backendVn.SWP.entities.Payment;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface PaymentRepository extends JpaRepository<Payment, Integer> {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SWP/src/main/java/com/backendVn/SWP/repositories/PaymentRepository.java b/SWP/src/main/java/com/backendVn/SWP/repositories/PaymentRepository.java
--- a/SWP/src/main/java/com/backendVn/SWP/repositories/PaymentRepository.java	
+++ b/SWP/src/main/java/com/backendVn/SWP/repositories/PaymentRepository.java	
@@ -4,4 +4,4 @@
 import org.springframework.data.jpa.repository.JpaRepository;
 
 public interface PaymentRepository extends JpaRepository<Payment, Integer> {
-}
\ No newline at end of file
+}
Index: SWP/src/main/java/com/backendVn/SWP/exception/ErrorCode.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.backendVn.SWP.exception;\r\n\r\nimport lombok.Getter;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.HttpStatusCode;\r\n\r\n@Getter\r\npublic enum ErrorCode {\r\n    UNCATEGORIZED_EXCEPTION(9999, \"Uncategorized error\", HttpStatus.INTERNAL_SERVER_ERROR),\r\n    INVALID_KEY(1001, \"Invalid key\", HttpStatus.BAD_REQUEST),\r\n    USER_EXISTED(1002, \"User existed\", HttpStatus.BAD_REQUEST),\r\n    INVALID_USERNAME(1003, \"Username must be at least 3 characters\", HttpStatus.BAD_REQUEST),\r\n    INVALID_PASSWORD(1004, \"Password must be at least 8 characters\", HttpStatus.BAD_REQUEST),\r\n    USER_NOT_EXISTED(1005, \"User not existed\", HttpStatus.NOT_FOUND),\r\n    UNAUTHENTICATED(1006, \"Unauthenticated user\", HttpStatus.UNAUTHORIZED),\r\n    INTERNAL_SERVER_ERROR(1007, \"Internal server error\", HttpStatus.INTERNAL_SERVER_ERROR),\r\n    REQUEST_NOT_FOUND(1008, \"Request not found\", HttpStatus.NOT_FOUND),\r\n    DESCRIPTION_EMPTY(1009, \"Description cannot be empty\", HttpStatus.BAD_REQUEST),\r\n    QUOTATION_NOT_FOUND(1010, \"Quotation not found\", HttpStatus.NOT_FOUND),\r\n    REQUEST_ORDER_NOT_FOUND(1011, \"Request Order not found\", HttpStatus.NOT_FOUND),\r\n    DESIGN_NOT_FOUND(1012, \"Request Order not found\", HttpStatus.NOT_FOUND),\r\n    WARRANTY_CARD_NOT_FOUND(1013, \"Warranty card not found\", HttpStatus.NOT_FOUND),\r\n    INVOICE_NOT_FOUND(1014, \"Invoice card not found\", HttpStatus.NOT_FOUND),\r\n    MATERIAL_NOT_FOUND(1015, \"Invoice card not found\", HttpStatus.NOT_FOUND),\r\n    INVOICE_DETAIL_NOT_FOUND(1016, \"Invoice card not found\", HttpStatus.NOT_FOUND),\r\n    REQUEST_STATUS_NOT_ALLOWED(1017, \"Request status not allowed for update\", HttpStatus.FORBIDDEN),\r\n    END_DATE_INVALID(1018, \"End date must be in the future\", HttpStatus.BAD_REQUEST),\r\n    INVALID_EMAIL(1019, \"Invalid email format\", HttpStatus.BAD_REQUEST),\r\n    INVALID_TITLE(1020, \"Invalid title\", HttpStatus.BAD_REQUEST),\r\n    END_DATE_REQUIRED(1021, \"End date is required\", HttpStatus.BAD_REQUEST),\r\n    DESIGN_NAME_EMPTY(1022, \"Design name cannot be empty\", HttpStatus.BAD_REQUEST),\r\n    DESIGN_NAME_TOO_LONG(1023, \"Design name cannot exceed 100 characters\", HttpStatus.BAD_REQUEST),\r\n    DESCRIPTION_TOO_LONG(1024, \"Description cannot exceed 255 characters\", HttpStatus.BAD_REQUEST),\r\n    URL_IMAGE_TOO_LONG(1025, \"URL image cannot exceed 255 characters\", HttpStatus.BAD_REQUEST),\r\n    TOKEN_EMPTY(1026, \"Token cannot be empty\", HttpStatus.BAD_REQUEST);\r\n    ;\r\n    private int code;\r\n    private String message;\r\n    private HttpStatusCode httpStatusCode;\r\n\r\n    ErrorCode(int code, String message, HttpStatusCode httpStatusCode) {\r\n        this.code = code;\r\n        this.message = message;\r\n        this.httpStatusCode = httpStatusCode;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SWP/src/main/java/com/backendVn/SWP/exception/ErrorCode.java b/SWP/src/main/java/com/backendVn/SWP/exception/ErrorCode.java
--- a/SWP/src/main/java/com/backendVn/SWP/exception/ErrorCode.java	
+++ b/SWP/src/main/java/com/backendVn/SWP/exception/ErrorCode.java	
@@ -32,7 +32,8 @@
     DESIGN_NAME_TOO_LONG(1023, "Design name cannot exceed 100 characters", HttpStatus.BAD_REQUEST),
     DESCRIPTION_TOO_LONG(1024, "Description cannot exceed 255 characters", HttpStatus.BAD_REQUEST),
     URL_IMAGE_TOO_LONG(1025, "URL image cannot exceed 255 characters", HttpStatus.BAD_REQUEST),
-    TOKEN_EMPTY(1026, "Token cannot be empty", HttpStatus.BAD_REQUEST);
+    TOKEN_EMPTY(1026, "Token cannot be empty", HttpStatus.BAD_REQUEST),
+    PAYMENT_NOT_FOUND(1027,"Payment not found", HttpStatus.BAD_REQUEST);
     ;
     private int code;
     private String message;
Index: SWP/src/main/java/com/backendVn/SWP/controllers/PaymentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SWP/src/main/java/com/backendVn/SWP/controllers/PaymentController.java b/SWP/src/main/java/com/backendVn/SWP/controllers/PaymentController.java
new file mode 100644
--- /dev/null	
+++ b/SWP/src/main/java/com/backendVn/SWP/controllers/PaymentController.java	
@@ -0,0 +1,44 @@
+package com.backendVn.SWP.controllers;
+
+import com.backendVn.SWP.dtos.response.ApiResponse;
+import com.backendVn.SWP.dtos.response.PaymentResponse;
+import com.backendVn.SWP.services.PaymentService;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.web.bind.annotation.*;
+
+import java.util.List;
+
+@RestController
+@RequestMapping("/payment")
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class PaymentController {
+    PaymentService paymentService;
+    @PostMapping ("/{requestID}")
+    public ApiResponse<PaymentResponse> createPayment(@PathVariable Integer requestID) {
+        return ApiResponse.<PaymentResponse>builder()
+                .result(paymentService.createPayment(requestID))
+                .build();
+    }
+
+    @PutMapping("/{paymentID}")
+    public ApiResponse<PaymentResponse> updatePayment(@PathVariable Integer paymentID) {
+        return  ApiResponse.<PaymentResponse>builder()
+                .result(paymentService.updatePayment(paymentID))
+                .build();
+    }
+
+    @GetMapping
+    public ApiResponse<List<PaymentResponse>> getPayment(){
+        return ApiResponse.<List<PaymentResponse>>builder()
+                .result(paymentService.getPayment())
+                .build();
+    }
+
+    @DeleteMapping("/{paymentID}")
+    public void deletePayment(@PathVariable Integer paymentID){
+        paymentService.deletePayment(paymentID);
+    }
+}
Index: SWP/src/main/java/com/backendVn/SWP/services/PaymentService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SWP/src/main/java/com/backendVn/SWP/services/PaymentService.java b/SWP/src/main/java/com/backendVn/SWP/services/PaymentService.java
new file mode 100644
--- /dev/null	
+++ b/SWP/src/main/java/com/backendVn/SWP/services/PaymentService.java	
@@ -0,0 +1,57 @@
+package com.backendVn.SWP.services;
+
+import com.backendVn.SWP.dtos.response.PaymentResponse;
+import com.backendVn.SWP.entities.Invoice;
+import com.backendVn.SWP.entities.Payment;
+import com.backendVn.SWP.entities.Request;
+import com.backendVn.SWP.exception.AppException;
+import com.backendVn.SWP.exception.ErrorCode;
+import com.backendVn.SWP.mappers.PaymentMapper;
+import com.backendVn.SWP.repositories.InvoiceRepository;
+import com.backendVn.SWP.repositories.PaymentRepository;
+import com.backendVn.SWP.repositories.RequestRepository;
+import lombok.AccessLevel;
+import lombok.RequiredArgsConstructor;
+import lombok.experimental.FieldDefaults;
+import org.springframework.stereotype.Service;
+
+import java.time.Instant;
+import java.util.List;
+
+@Service
+@RequiredArgsConstructor
+@FieldDefaults(level = AccessLevel.PRIVATE, makeFinal = true)
+public class PaymentService {
+    PaymentRepository paymentRepository;
+    PaymentMapper paymentMapper;
+    RequestRepository requestRepository;
+    InvoiceRepository invoiceRepository;
+
+    public PaymentResponse createPayment(Integer requestID) {
+        Request request = requestRepository.findById(requestID).orElseThrow(()-> new AppException(ErrorCode.REQUEST_NOT_FOUND));
+
+        Payment payment = new Payment();
+        payment.setPaymentDate(Instant.now());
+        payment.setPaymentType("");
+        payment.setStatus("unpaid");
+        payment.setRequestID(request);
+        Invoice invoice = invoiceRepository.findByRequestID(requestID);
+        payment.setAmount(invoice.getTotalCost());
+        Payment savedPayment = paymentRepository.save(payment);
+        return paymentMapper.toPaymentResponse(savedPayment);
+    }
+
+    public PaymentResponse updatePayment( Integer id) {
+        Payment payment = paymentRepository.findById(id).orElseThrow(() -> new AppException(ErrorCode.PAYMENT_NOT_FOUND));
+        payment.setStatus("paid");
+        return paymentMapper.toPaymentResponse(paymentRepository.save(payment));
+    }
+
+    public List<PaymentResponse> getPayment() {
+        return paymentRepository.findAll().stream().map(paymentMapper::toPaymentResponse).toList();
+    }
+
+    public void deletePayment(Integer id) {
+        paymentRepository.deleteById(id);
+    }
+}
Index: SWP/src/main/java/com/backendVn/SWP/repositories/InvoiceRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.backendVn.SWP.repositories;\r\n\r\nimport com.backendVn.SWP.entities.Invoice;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\n\r\npublic interface InvoiceRepository extends JpaRepository<Invoice, Integer> {\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SWP/src/main/java/com/backendVn/SWP/repositories/InvoiceRepository.java b/SWP/src/main/java/com/backendVn/SWP/repositories/InvoiceRepository.java
--- a/SWP/src/main/java/com/backendVn/SWP/repositories/InvoiceRepository.java	
+++ b/SWP/src/main/java/com/backendVn/SWP/repositories/InvoiceRepository.java	
@@ -1,7 +1,9 @@
 package com.backendVn.SWP.repositories;
 
 import com.backendVn.SWP.entities.Invoice;
+import com.backendVn.SWP.entities.Request;
 import org.springframework.data.jpa.repository.JpaRepository;
 
 public interface InvoiceRepository extends JpaRepository<Invoice, Integer> {
+    Invoice findByRequestID(Integer requestID);
 }
\ No newline at end of file
Index: SWP/src/main/java/com/backendVn/SWP/dtos/response/PaymentResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SWP/src/main/java/com/backendVn/SWP/dtos/response/PaymentResponse.java b/SWP/src/main/java/com/backendVn/SWP/dtos/response/PaymentResponse.java
new file mode 100644
--- /dev/null	
+++ b/SWP/src/main/java/com/backendVn/SWP/dtos/response/PaymentResponse.java	
@@ -0,0 +1,15 @@
+package com.backendVn.SWP.dtos.response;
+
+import com.backendVn.SWP.entities.Request;
+
+import java.math.BigDecimal;
+import java.time.Instant;
+
+public class PaymentResponse {
+    Integer id;
+    Request requestID;
+    BigDecimal amount;
+    Instant paymentDate;
+    String paymentType;
+    String status;
+}
Index: SWP/src/main/java/com/backendVn/SWP/mappers/PaymentMapper.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SWP/src/main/java/com/backendVn/SWP/mappers/PaymentMapper.java b/SWP/src/main/java/com/backendVn/SWP/mappers/PaymentMapper.java
new file mode 100644
--- /dev/null	
+++ b/SWP/src/main/java/com/backendVn/SWP/mappers/PaymentMapper.java	
@@ -0,0 +1,11 @@
+package com.backendVn.SWP.mappers;
+
+import com.backendVn.SWP.dtos.response.PaymentResponse;
+import com.backendVn.SWP.entities.Payment;
+import org.mapstruct.Mapper;
+import org.mapstruct.MappingTarget;
+
+@Mapper(componentModel = "spring")
+public interface PaymentMapper {
+    PaymentResponse toPaymentResponse(Payment payment);
+}
